// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Monitor.Query.Models
{
    internal static partial class BatchMetricUnitExtensions
    {
        public static string ToSerialString(this BatchMetricUnit value) => value switch
        {
            BatchMetricUnit.Count => "Count",
            BatchMetricUnit.Bytes => "Bytes",
            BatchMetricUnit.Seconds => "Seconds",
            BatchMetricUnit.CountPerSecond => "CountPerSecond",
            BatchMetricUnit.BytesPerSecond => "BytesPerSecond",
            BatchMetricUnit.Percent => "Percent",
            BatchMetricUnit.MilliSeconds => "MilliSeconds",
            BatchMetricUnit.ByteSeconds => "ByteSeconds",
            BatchMetricUnit.Unspecified => "Unspecified",
            BatchMetricUnit.Cores => "Cores",
            BatchMetricUnit.MilliCores => "MilliCores",
            BatchMetricUnit.NanoCores => "NanoCores",
            BatchMetricUnit.BitsPerSecond => "BitsPerSecond",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown BatchMetricUnit value.")
        };

        public static BatchMetricUnit ToBatchMetricUnit(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Count")) return BatchMetricUnit.Count;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Bytes")) return BatchMetricUnit.Bytes;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Seconds")) return BatchMetricUnit.Seconds;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "CountPerSecond")) return BatchMetricUnit.CountPerSecond;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "BytesPerSecond")) return BatchMetricUnit.BytesPerSecond;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Percent")) return BatchMetricUnit.Percent;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "MilliSeconds")) return BatchMetricUnit.MilliSeconds;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "ByteSeconds")) return BatchMetricUnit.ByteSeconds;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Unspecified")) return BatchMetricUnit.Unspecified;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "Cores")) return BatchMetricUnit.Cores;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "MilliCores")) return BatchMetricUnit.MilliCores;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "NanoCores")) return BatchMetricUnit.NanoCores;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "BitsPerSecond")) return BatchMetricUnit.BitsPerSecond;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown BatchMetricUnit value.");
        }
    }
}
